0000 6022                          0 	bra.s start
0002 0000 0000                     1 	dc.l  0
0006 4AFB                          2 	dc.w  $4afb
0008                               3 
0008 0019                          4 fname	dc.w  fname_e-fname-2
000A 4170 706C 6963 6174 696F      5 	dc.b  "Application Window Test 1"
0023 00                            6 fname_e ds.b  0
0024                               7 	ds.w  0
0024                               8 
0024                               9 ; We need the various equates files etc.
0024                              10 
0024                              11 	in win1_georgegwilt_peass_keys_pe
0024                              12 ; keys_pe
0024                              13 ; Keys for PE traps
0024                              14 
0024                              15 ; Trap #3 routines
0024                              16 
0024                              17 iop_flim	equ	$6C
0024                              18 iop_lblb	equ	$74
0024                              19 iop_outl	equ	$7A
0024                              20 iop_pick	equ	$7C
0024                              21 iop_pinf	equ	$70
0024                              22 iop_rptr	equ	$71
0024                              23 iop_rpxl	equ	$72
0024                              24 iop_rspw	equ	$6E
0024                              25 iop_slnk	equ	$6F
0024                              26 iop_spry	equ	$77
0024                              27 iop_sptr	equ	$7B
0024                              28 iop_svpw	equ	$6D
0024                              29 iop_swdf	equ	$7D
0024                              30 iop_wblb	equ	$73
0024                              31 iop_wrst	equ	$7F
0024                              32 iop_wsav	equ	$7E
0024                              33 iop_wspt	equ	$76
0024                              34 	in win1_georgegwilt_peass_qdos_pt
0024                              35 * pointer interface keys and structures
0024                              36 *
0024                              37 *	Pointer return event vector bits
0024                              38 *
0024                              39 * Altered:
0024                              40 *  All . -> _
0024                              41 *  pto.blk -> pto_bblk
0024                              42 *  ptp.flag -> ptp_flg
0024                              43 *  binary numbers -> hex numbers
0024                              44 *  nolist and list expunged
0024                              45 
0024                              46 pt_kystk equ	$01	keystroke in window event
0024                              47 pt_kyprs equ	$02	key still pressed in window event
0024                              48 pt_keyup equ	$04	key up in window event
0024                              49 pt_move  equ	$08	pointer move event
0024                              50 pt_outwn equ	$10	pointer out of window
0024                              51 pt_inwin equ	$20	pointer in window
0024                              52 pt_offsc equ	$40	pointer off screen
0024                              53 *
0024                              54 * window query events
0024                              55 *
0024                              56 pt_wqury equ	$80	window query
0024                              57 pt_wmove equ	$81	window move
0024                              58 pt_wsize equ	$82	window resize
0024                              59 *
0024                              60 pt__kyst equ	0	keystroke  in window event bit
0024                              61 pt__kypr equ	1	keypress in window event bit
0024                              62 pt__kyup equ	2	key up in window event bit
0024                              63 pt__move equ	3	pointer move event bit
0024                              64 pt__outw equ	4	pointer out of window bit
0024                              65 pt__inwn equ	5	pointer in window bit
0024                              66 pt__ofsc equ	6	pointer off screen bit
0024                              67 *
0024                              68 pt__splt equ	8	split sub-window
0024                              69 pt__join equ	9	join sub-window
0024                              70 pt__pan  equ	10	pan sub-window
0024                              71 pt__scrl equ	11	scroll sub-window
0024                              72 *
0024                              73 pt__do   equ	16	do command
0024                              74 pt__can  equ	17	cancel command
0024                              75 pt__help equ	18	help!!!
0024                              76 pt__wmov equ	19	window move
0024                              77 pt__wsiz equ	20	window size
0024                              78 pt__zzzz equ	21	sleep
0024                              79 pt__wake equ	22	wake
0024                              80 pt__null equ	23	null event !!
0024                              81 *
0024                              82 * PT_RPTR pointer record
0024                              83 *
0024                              84 pp_chid  equ	$00	channel ID or -1
0024                              85 pp_chnr  equ	$02	channel number or -1
0024                              86 pp_sbwnr equ	$04	sub-window number or -1
0024                              87 pp_xpos  equ	$06	x position or -1
0024                              88 pp_ypos  equ	$08	y position or -1
0024                              89 pp_kstrk equ	$0a	keystroke
0024                              90 pp_kpres equ	$0b	key depressed
0024                              91 pp_event equ	$0c	event vector
0024                              92 pp_jevnt equ	$0c	job event
0024                              93 pp_wevnt equ	$0d	window byte of event vector
0024                              94 pp_sevnt equ	$0e	sub-window byte of event vector
0024                              95 pp_pevnt equ	$0f	pointer byte of event vector
0024                              96 pp_subdf equ	$10	sub-window definition (4 words)
0024                              97 pp_end   equ	$18
0024                              98 *
0024                              99 * Definitions of objects
0024                             100 *
0024                             101 pto_form equ	$00	word	FORM of object
0024                             102 pto_vers equ	$02	byte	dynamic sprite VERSion number
0024                             103 pto_ctrl equ	$03	byte	sprite control bits
0024                             104 pto_cver equ	$03 %00000011 cache version number bits
0024                             105 pto_fupd equ	$03 %00000011 pto_cver value for "force cache update"
0024                             106 pto_bblk equ	$04 %00000100 bit set if sprite block present
0024                             107 pto__blk equ	2
0024                             108 pto_opt  equ	$08 %00001000 bit set if options (pointer) present
0024                             109 pto__opt equ	4
0024                             110 pto_alph equ	$20 %00100000 sprite uses alpha channel
0024                             111 pto__alph equ	5
0024                             112 pto_pcmp equ	$40 %01000000 pattern compressed bit
0024                             113 pto__pcmp equ	6
0024                             114 pto_mcmp equ	$80 %10000000 mask compressed bit
0024                             115 pto__mcmp equ	7
0024                             116 pto_cmp  equ	$C0 %11000000 sprite compressed bit
0024                             117 pto_size equ	$04		x and y SIZE of object
0024                             118 pto_xsiz equ	$04	word	X SIZe of object
0024                             119 pto_ysiz equ	$06	word	Y SIZe of object
0024                             120 pto_org  equ	$08		ORiGin of object
0024                             121 pto_xorg equ	$08	word	X ORiGin of object
0024                             122 pto_yorg equ	$0a	word	Y ORiGin of object
0024                             123 pto_cpat equ	$0c	long	relative pointer to Colour PATtern
0024                             124 pto_mask equ	$10	long	relative pointer to MASK
0024                             125 pto_nobj equ	$14	long	relative pointer to Next OBJect
0024                             126 pto_hdrl equ	$18		object HeaDeR Length
0024                             127 
0024                             128 pto_opts equ	$18	long	optional (relative pointer to) options
0024                             129 pto_blk  equ	$1c	long	optional relative pointer to sprite block
0024                             130 pto_xshl equ	$20		eXtended Sprite Header Length
0024                             131 
0024                             132 *
0024                             133 * Definition of partial save area header
0024                             134 *
0024                             135 ptp_link equ	$00	long	user defined LINK longword
0024                             136 ptp_flag equ	$04	word	FLAG word
0024                             137 ptp_flg  equ	$4afc		what you expect to find there
0024                             138 ptp_xsiz equ	$06	word	total X SIZe
0024                             139 ptp_ysiz equ	$08	word	total Y SIZe
0024                             140 ptp_rinc equ	$0a	word	Row INCrement
0024                             141 ptp_mode equ	$0c	word	MODE of saved data
0024                             142 ptp_bits equ	$0e
0024                             143 ptp_hdrl equ	$0e		HeaDeR Length
0024                             144 *
0024                             145 * sub-window definitions
0024                             146 *
0024                             147 sw_xsize equ	$00	word	sub-window X size
0024                             148 sw_ysize equ	$02	word	sub-window Y size
0024                             149 sw_xorg  equ	$04	word	sub-window X origin
0024                             150 sw_yorg  equ	$06	word	sub-window Y origin
0024                             151 sw_attr  equ	$08	8 bytes attributes
0024                             152 sw_kflg  equ	$08	byte	cursor key flag
0024                             153 sw__kfl  equ	  0		___ in bit 0
0024                             154 sw_psprt equ	$10	long	pointer to sprite
0024                             155 sw_defl  equ	$14		sub-window DEFinition Length
0024                             156 *
0024                             157 	in win1_georgegwilt_peass_keys_wwork
0024                             158 *  Window Working Definition
0024                             159 *
0024                             160 ww_shadx equ    $4	         x shadow multiplier
0024                             161 ww_shady equ    $3	         y shadow multiplier
0024                             162 ww_scarr equ    $4	         scroll arrow height
0024                             163 ww_scasp equ    $18          scroll arrow spacing
0024                             164 ww_scawd equ    $a	         scroll arrow width
0024                             165 ww_pnarr equ    $8	         pan arrow width
0024                             166 ww_pnasp equ    $c	         pan arrow spacing
0024                             167 ww_pnaht equ    $5	         pan arrow height
0024                             168 ww_scbar equ    $6	         width of scroll bar
0024                             169 ww_pnbar equ    $4	         height of pan bar
0024                             170 ww_ptoff equ    $20002       offset of pointer for keystroke hits
0024                             171 *
0024                             172 ww_wstat equ    $00   long   pointer to window status area
0024                             173 ww_wdef  equ    $04   long   pointer to window definition
0024                             174 ww_chid  equ    $08   long   channel ID for window
0024                             175 *
0024                             176 ww_pprec equ    $0c   long   pointer to pointer record (24 bytes)
0024                             177 ww_psave equ    $10   long   saved pointer position (absolute)
0024                             178 *
0024                             179 ww_spar1 equ    $14   long   window spare 1
0024                             180 ww_spar2 equ    $18   word   window spare 2
0024                             181 ww_spar3 equ    $1a   byte   window spare 3
0024                             182 ww_pulld equ    $1b   byte   flag set if window is pulled down
0024                             183 ww_splst equ    $1c   long   pointer to sub-window sprite list
0024                             184 *
0024                             185 ww_xsize equ    $20   word   window x size (width) in pixels
0024                             186 ww_ysize equ    $22   word   window y size (height) in pixels
0024                             187 ww_xorg  equ    $24   word   x origin of window
0024                             188 ww_yorg  equ    $26   word   y origin of window
0024                             189 ww_wattr equ    $28          window attributes
0024                             190 ww_psprt equ    $30   long   pointer to pointer sprite for this window
0024                             191 ww_lattr equ    $34          loose menu item attributes
0024                             192 ww_help  equ    $5c   long   pointer to help definition
0024                             193 ww_head  equ    $60          end of header
0024                             194 *
0024                             195 ww_ninfo equ    $60   word   number of information sub-windows
0024                             196 ww_ninob equ    $62   word   number of information sub-window objects
0024                             197 ww_pinfo equ    $64   long   pointer to information sub-window definition list
0024                             198 ww_nlitm equ    $68   word   number of loose menu items
0024                             199 ww_plitm equ    $6a   long   pointer to loose menu item list
0024                             200 ww_nappl equ    $6e   word   number of application sub-windows
0024                             201 ww_pappl equ    $70   long   pointer to application sub-window definition list
0024                             202 ww_lists equ    $74          start of definition lists
0024                             203 *
0024                             204 * Window Attributes
0024                             205 *
0024                             206 wwa_clfg equ    $00   byte   clear flag
0024                             207 wwa__cfl equ      7 	  ___ in bit 7
0024                             208 wwa_kflg equ    $00   byte   cursor key flag
0024                             209 wwa__kfl equ      0 	  ___ in bit 0
0024                             210 wwa_shdd equ    $01   byte   shadow depth
0024                             211 wwa_borw equ    $02   word   border width
0024                             212 wwa_borc equ    $04   word   border colour
0024                             213 wwa_papr equ    $06   word   paper colour
0024                             214 *
0024                             215 * Menu Item Attributes
0024                             216 *
0024                             217 wwa_curw equ    $00   word   current item border width
0024                             218 wwa_curc equ    $02   word   current item border colour
0024                             219 wwa_attr equ    $04          attribute records
0024                             220 wwa_unav equ    $04          item unavailable
0024                             221 wwa_aval equ    $10          item available
0024                             222 wwa_selc equ    $1c          item selected
0024                             223 wwa_elen equ    $28          menu item attribute entry length
0024                             224 *
0024                             225 *   attribute record
0024                             226 wwa_back equ    $00   word   item background colour
0024                             227 wwa_ink  equ    $02   word   text object ink colour 
0024                             228 wwa_blob equ    $04   long   pointer to blob for pattern
0024                             229 wwa_patt equ    $08   long   pointer to pattern for blob
0024                             230 wwa_alen equ    $0c          attribute record length
0024                             231 *
0024                             232 * Loose Menu Items List
0024                             233 *
0024                             234 wwl_xsiz equ    $00   word   hit area x size (width)
0024                             235 wwl_ysiz equ    $02   word   hit area y size (height)
0024                             236 wwl_xorg equ    $04   word   hit area x origin
0024                             237 wwl_yorg equ    $06   word   hit area y origin 
0024                             238 wwl_xjst equ    $08   byte   object x justification rule
0024                             239 wwl_yjst equ    $09   byte   object y justification rule
0024                             240 wwl_type equ    $0a   byte   object type (0=text, 2=sprite, 4=blob, 6=pattern)
0024                             241 wwl_skey equ    $0b   byte   selection keystroke
0024                             242 wwl_pobj equ    $0c   long   pointer to object
0024                             243 wwl_item equ    $10   word   item number 
0024                             244 wwl_pact equ    $12   long   pointer to action routine
0024                             245 wwl_elen equ    $16          loose menu item list entry length
0024                             246 *
0024                             247 * Information Sub-Window
0024                             248 *
0024                             249 wwi_xsiz equ    $00   word   sub-window x size (width) in pixels
0024                             250 wwi_ysiz equ    $02   word   sub-window y size (height) in pixels
0024                             251 wwi_xorg equ    $04   word   sub-window x origin
0024                             252 wwi_yorg equ    $06   word   sub-window y origin
0024                             253 wwi_watt equ    $08          sub-window attributes
0024                             254 wwi_pobl equ    $10   long   pointer to information object list
0024                             255 wwi_elen equ    $14          information list entry length
0024                             256 *
0024                             257 * Information Object List
0024                             258 *
0024                             259 wwo_xsiz equ    $00   word   object x size (width) in pixels
0024                             260 wwo_ysiz equ    $02   word   object y size (height) in pixels
0024                             261 wwo_xorg equ    $04   word   object x origin
0024                             262 wwo_yorg equ    $06   word   object y origin 
0024                             263 wwo_type equ    $08   byte   object type (0=text, 2=sprite, 4=blob, 6=pattern)
0024                             264 wwo_spar equ    $09   byte   spare
0024                             265 wwo_ink  equ    $0a   word   text ink colour
0024                             266 wwo_csiz equ    $0c   word   text character size (two bytes)
0024                             267 wwo_comb equ    $0a   long   pattern or blob to combine
0024                             268 wwo_pobj equ    $0e   long   pointer to object
0024                             269 wwo_elen equ    $12          information object list entry length
0024                             270 *
0024                             271 * Application sub-window definition
0024                             272 *
0024                             273 wwa_xsiz equ    $00   word   sub-window x size (width) in pixels
0024                             274 wwa_ysiz equ    $02   word   sub-window y size (height) in pixels
0024                             275 wwa_xorg equ    $04   word   sub-window x origin
0024                             276 wwa_yorg equ    $06   word   sub-window y origin
0024                             277 wwa_watt equ    $08          sub-window attributes
0024                             278 wwa_pspr equ    $10   long   pointer to pointer sprite for this sub window
0024                             279 wwa_draw equ    $14   long   pointer to application sub-window draw routine
0024                             280 wwa_hit  equ    $18   long   pointer to application sub-window hit routine
0024                             281 wwa_ctrl equ    $1c   long   pointer to sub-window control routine (or 0)
0024                             282 wwa_nxsc equ    $20   word   maximum number of x control sections
0024                             283 wwa_nysc equ    $22   word   maximum number of y control sections
0024                             284 wwa_skey equ    $24   byte   application sub-window selection key
0024                             285 wwa_blen equ    $28          application sub-window basic definition length
0024                             286 *
0024                             287 *   pannable and scrollable sub-windows only (wwa_nxsc or wwa_nysc <>0)
0024                             288 *
0024                             289 wwa_part equ    $28   long   pointer to the part window control block (or 0)
0024                             290 wwa_insz equ    $2c   word   index hit size
0024                             291 wwa_insp equ    $2e   word   index spacing left or above sub-window
0024                             292 wwa_icur equ    $30   long   index current item attribute (border width, colour)
0024                             293 wwa_iiat equ    $34          index item attribute record
0024                             294 wwa_psac equ    $40   word   pan or scroll arrow colour
0024                             295 wwa_psbc equ    $42   word   pan or scroll bar colour
0024                             296 wwa_pssc equ    $44   word   pan or scroll bar section colour
0024                             297 wwa_clen equ    $1e          application sub-window control definition length
0024                             298 *
0024                             299 *   menu sub-windows only
0024                             300 *
0024                             301 wwa_mstt equ    $64   long   pointer to the menu status block
0024                             302 wwa_iatt equ    $68          item attributes
0024                             303 wwa_ncol equ    $90   word   number of actual columns
0024                             304 wwa_nrow equ    $92   word   number of actual rows
0024                             305 wwa_xoff equ    $94   word   x offset of start of menu (section)
0024                             306 wwa_yoff equ    $96   word   y offset of start of menu (section)
0024                             307 wwa_xspc equ    $98   long   pointer to x (column) spacing list or -ve spacings
0024                             308 wwa_yspc equ    $9c   long   pointer to y (row) spacing list or -ve spacings
0024                             309 wwa_xind equ    $a0   long   pointer to x (column) index list
0024                             310 wwa_yind equ    $a4   long   pointer to y (row) index list
0024                             311 wwa_rowl equ    $a8   long   pointer to menu row list
0024                             312 wwa_mlen equ    $48          length of menu working definition
0024                             313 *
0024                             314 *   menu object spacing list
0024                             315 *
0024                             316 wwm_size equ    $00   word   object hit size
0024                             317 wwm_spce equ    $02   word   object spacing
0024                             318 wwm_slen equ    $04          object spacing list element length
0024                             319 *
0024                             320 *   menu row list
0024                             321 *
0024                             322 wwm_rows equ    $00   long   pointer to object row list start
0024                             323 wwm_rowe equ    $04   long   pointer to object row list end
0024                             324 wwm_rlen equ    $08          menu row list element length
0024                             325 *
0024                             326 *   menu object / index list
0024                             327 wwm_xjst equ    $00   byte   object x justification rule
0024                             328 wwm_yjst equ    $01   byte   object y justification rule
0024                             329 wwm_type equ    $02   byte   object type (0=text, 2=sprite, 4=blob, 6=pattern)
0024                             330 wwm_skey equ    $03   byte   selection keystroke
0024                             331 wwm_pobj equ    $04   long   pointer to object
0024                             332 wwm_item equ    $08   word   item number (-ve for index)
0024                             333 wwm_pact equ    $0a   long   pointer to action routine (zero for index)
0024                             334 wwm_olen equ    $0e          menu object / index list entry length
0024                             335 *
0024                             336 * Definition fixup table keys
0024                             337 *
0024                             338 wwf_wdef equ    $00          fix working definition
0024                             339 wwf_wstt equ    $02 	   status area
0024                             340 wwf_loos equ    $04 	   loose object
0024                             341 wwf_infw equ    $06 	   information window
0024                             342 wwf_info equ    $08 	   information object
0024                             343 wwf_appl equ    $0a 	   application sub-window list
0024                             344 wwf_appw equ    $0c 	   application sub-window
0024                             345 wwf_xctb equ    $0e 	   x control block
0024                             346 wwf_yctb equ    $10 	   y control block
0024                             347 wwf_mstt equ    $12 	   menu status block
0024                             348 wwf_xspc equ    $14 	   x spacing list
0024                             349 wwf_yspc equ    $16 	   y spacing list
0024                             350 wwf_xind equ    $18 	   x index object
0024                             351 wwf_yind equ    $1a 	   y index object
0024                             352 wwf_rlst equ    $1c 	   row list
0024                             353 wwf_mobj equ    $1e 	   menu object
0024                             354 *
0024                             355 wwf_addr equ    $80 %10000000       address (long, overwrite)
0024                             356 wwf_set  equ    $40 %01000000       overwrite data
0024                             357 wwf_add  equ    $00 %00000000       add data
0024                             358 wwf_byte equ    $00 %00000000       byte data
0024                             359 wwf_word equ    $10 %00010000       word data
0024                             360 wwf_long equ    $20 %00100000       long data
0024                             361 wwf__lng equ    5
0024                             362 wwf_xlng equ    $30 %00110000       extended data
0024                             363 wwf__ext equ    4
0024                             364 wwf_vabs equ    $00 %00000000       data absolute (in table)
0024                             365 wwf_vrel equ    $01 %00000001       data relative
0024                             366 wwf_vatb equ    $02 %00000010       data in data area
0024                             367 wwf_vitb equ    $03 %00000011       data pointed to from data area
0024                             368 wwf_vrtb equ    $04 %00000100       data offset from pointer in data area
0024                             369 	in win1_georgegwilt_peass_keys_wstatus
0024                             370 * Window Status Area
0024                             371 *
0024                             372 *   window linkage area
0024                             373 *
0024                             374 ws_work  equ    $00   long   pointer to window working definition
0024                             375 ws_wdef  equ    $04   long   pointer to window definition
0024                             376 *
0024                             377 *   window working area
0024                             378 *
0024                             379 ws_point equ    $08          pointer record (16 bytes)
0024                             380 wsp_chid equ    $08   long   channel ID of window enclosing the pointer
0024                             381 wsp_swnr equ    $0c   word   sub-window number enclosing pointer (or -1)
0024                             382 wsp_xpos equ    $0e   word   pointer x pixel position
0024                             383 wsp_ypos equ    $10   word   pointer y pixel position
0024                             384 wsp_kstr equ    $12   byte   key stroke (or 0)
0024                             385 wsp_kprs equ    $13   byte   key press (or 0)
0024                             386 wsp_evnt equ    $14   long   event vector
0024                             387 wsp_jeve equ    $14   byte   job byte of event vector
0024                             388 wsp_weve equ    $15   byte   window byte of event vector
0024                             389 wsp_seve equ    $16   byte   sub-window byte of event vector
0024                             390 wsp_peve equ    $17   byte   pointer byte of event vector
0024                             391 *
0024                             392 ws_subdf equ    $18          sub_window definition (four words)
0024                             393 wsp_xsiz equ    $18   word   sub-window x size (width)
0024                             394 wsp_ysiz equ    $1a   word   sub-window y size (height)
0024                             395 wsp_xorg equ    $1c   word   sub-window x origin
0024                             396 wsp_yorg equ    $1e   word   sub-window y origin
0024                             397 *
0024                             398 ws_ptpos equ    $20   long   pointer position (absolute)
0024                             399 ws_wmode equ    $24   word   window mode
0024                             400 ws_scach equ    $26   byte   last used sprite cache version
0024                             401 *
0024                             402 ws_ciact equ    $2c   long   pointer to current item action routine
0024                             403 ws_citem equ    $30   word   current item in sub-window
0024                             404 ws_cibrw equ    $32   word   current item border width
0024                             405 ws_cipap equ    $34   word   paper behind current hit item
0024                             406 ws_cispr equ    $36
0024                             407 ws_cihit equ    $38          current item hit area (absolute coordinates)
0024                             408 ws_cihxs equ    $38   word	  x size
0024                             409 ws_cihys equ    $3a   word	  y size
0024                             410 ws_cihxo equ    $3c   word	  x origin
0024                             411 ws_cihyo equ    $3e   word	  y origin
0024                             412 *
0024                             413 wsi_ctrl equ    $7000        start of control item numbers
0024                             414 wsi_up   equ    $70          MSByte of item for up arrows  (LSByte is section)
0024                             415 wsi_dn   equ    $71          MSByte of item for down arrows
0024                             416 wsi_lt   equ    $72          MSByte of item for left arrows
0024                             417 wsi_rt   equ    $73          MSByte of item for right arrows
0024                             418 wsi_scr  equ    $78          MSByte of item for scroll bar
0024                             419 wsi_pan  equ    $7a          MSByte of item for pan bar
0024                             420 wsi__dnr equ    8	         item bit set for down/right
0024                             421 wsi__pan equ    9	         item bit set for pan
0024                             422 wsi__xt  equ    $a	         item bit set for extra pan/scroll
0024                             423 wsi__bar equ    $b	         item bit set for bar
0024                             424 *
0024                             425 *   loose menu item status block
0024                             426 *
0024                             427 ws_litem equ    $40          one byte per loose item (1 = unavailable,
0024                             428 *			0 = available, -1 = selected)
0024                             429 *
0024                             430 *   sub-window menu item status block
0024                             431 *
0024                             432 wss_item equ    $00          one byte per menu item (1 = unavailable,
0024                             433 *			0 = available, -1 = selected)
0024                             434 wss_ilen equ    $01          length of item status entry in status area
0024                             435 *
0024                             436 *   item flag values
0024                             437 *
0024                             438 wsi_unav equ    $10 	unavailable
0024                             439 wsi_avbl equ    $00 	available
0024                             440 wsi_slct equ    $80+$ffffff00 selected
0024                             441 wsi_mkun equ    $11 	re-draw, making unavailable
0024                             442 wsi_mkav equ    $01 	re-draw, making available
0024                             443 wsi_mksl equ    $81+$ffffff00 re-draw, making selected
0024                             444 wsi__chg equ    $00 	bit 0 set if item status changed
0024                             445 *
0024                             446 *   sub-window section control block header
0024                             447 *
0024                             448 wss_nsec equ    $00   word   number of sections
0024                             449 *
0024                             450 *   sub-window section control block record
0024                             451 *
0024                             452 wss_spos equ    $00   word   section start pixel position
0024                             453 wss_sstt equ    $02   word   section start column or row
0024                             454 wss_ssiz equ    $04   word   section size (number of columns or rows)
0024                             455 wss_ssln equ    $06          section status list entry length
0024                             456 	in win1_georgegwilt_peass_keys_wman
0024                             457 ;
0024                             458 ;	  Window manager vectors
0024                             459 ;
0024                             460 wm_vers	equ	    $00
0024                             461 wm_setup	equ	    $04
0024                             462 wm_smenu	equ	    $08
0024                             463 wm_prpos	equ	    $0c
0024                             464 wm_pulld	equ	    $10
0024                             465 wm_unset	equ	    $14
0024                             466 wm_wrset	equ	    $18
0024                             467 wm_wdraw	equ	    $1c
0024                             468 wm_mdraw	equ	    $20
0024                             469 wm_index	equ	    $24
0024                             470 wm_swdef	equ	    $28
0024                             471 wm_ldraw	equ	    $2c
0024                             472 wm_rptr	equ	    $30
0024                             473 wm_mhit	equ	    $34
0024                             474 wm_pansc	equ	    $38
0024                             475 wm_idraw	equ	    $3c
0024                             476 wm_chwin	equ	    $40
0024                             477 wm_drbdr	equ	    $44
0024                             478 wm_msect	equ	    $48
0024                             479 wm_stlob	equ	    $4c
0024                             480 wm_stiob	equ	    $50
0024                             481 wm_fsize	equ	    $54
0024                             482 wm_swinf	equ	    $58
0024                             483 wm_swlit	equ	    $5c
0024                             484 wm_swapp	equ	    $60
0024                             485 wm_swsec	equ	    $64
0024                             486 wm_rname	equ	    $68
0024                             487 wm_ename	equ	    $6c
0024                             488 wm_upbar	equ	    $70
0024                             489 wm_erstr	equ	    $74
0024                             490 wm_rptrt	equ	    $78
0024                             491 wm_setsp	equ	    $7c
0024                             492 wm_getsp	equ	    $80
0024                             493 wm_trap3	equ	    $84
0024                             494 wm_opw	  equ	    $88
0024                             495 wm_ssclr	equ	    $8c
0024                             496 wm_jbpal	equ	    $90
0024                             497 wm_cpspr	equ	    $94
0024                             498 ;
0024                             499 wm_drall	equ	    0		; draw all
0024                             500 wm_drsel	equ	    -1		; draw selectively
0024                             501 ;
0024                             502 ;	  Keys for values in window manager data structures
0024                             503 ;
0024                             504 textu	  equ	    -1
0024                             505 text	  equ	    0
0024                             506 sprite	  equ	    2
0024                             507 blob	  equ	    4
0024                             508 patt	  equ	    6
0024                             509 ;
0024                             510 ; Keys for colours (high order byte)
0024                             511 ;
0024                             512 wmc_ql	   equ	     $00	; traditional QL colours
0024                             513 wmc_pal	 equ	     $01	; palette colours
0024                             514 wmc_syspal equ	     $02	; system palette colour
0024                             515 wmc_gray	 equ	     $03	; gray colour
0024                             516 wmc_3db	 equ	     $04	; 3d border colour
0024                             517 wmc_stip	 equ	     $40	; stipple colour
0024                             518 wmc__stip  equ	     14	;   bit number in 16 bit word
0024                             519 wmc_rgb	 equ	     $80	; 15bit rgb
0024                             520 wmc__rgb	 equ	     15	;   bit number in 16 bit word
0024                             521 
0024                             522 
0024                             523 
0024                             524 
0024                             525 
0024                             526 
0024                             527 
0024                             528 ;
0024                             529 	in win1_georgegwilt_peass_keys_wdef
0024                             530 * Window Definition
0024                             531 *
0024                             532 *   Window definition table
0024                             533 *
0024                             534 wdt_menu equ    $00   long   relative pointer to menu definition
0024                             535 *
0024                             536 wdt_size equ    $00   long   space required for layout
0024                             537 wdt_stat equ    $04   word   offset of status area in global status area
0024                             538 wdt_mode equ    $06          preferred/allowed mode for this layout
0024                             539 wdt_mprf equ    $06   byte   preferred mode
0024                             540 wdt_mall equ    $07   byte   allowed modes
0024                             541 *
0024                             542 *   fixed part of window definition
0024                             543 *
0024                             544 wd_xsize equ    $00   word   default window x size (width) in pixels
0024                             545 wd_ysize equ    $02   word   default window y size (height) in pixels
0024                             546 wd_xorg  equ    $04   word   x origin of window
0024                             547 wd_yorg  equ    $06   word   y origin of window
0024                             548 wd_wattr equ    $08          window attributes
0024                             549 wd_psprt equ    $10   word   pointer to pointer sprite for this window
0024                             550 wd_lattr equ    $12          loose menu item attributes
0024                             551 wd_help  equ    $2e   word   pointer to help window
0024                             552 wd_rbase equ    $30          base of repeated part of window definition
0024                             553 *
0024                             554 *   repeated part of window definition
0024                             555 *
0024                             556 wd__vsiz equ    $e	         bit set in xmin or ymin if variable size permitted
0024                             557 wd_xmin  equ    $00   word   x minimum size for this layout
0024                             558 wd_ymin  equ    $02   word   y minimum size for this layout
0024                             559 wd_pinfo equ    $04   word   pointer to information sub-window definition list
0024                             560 wd_plitm equ    $06   word   pointer to loose menu item list
0024                             561 wd_pappl equ    $08   word   pointer to application sub-window definition list
0024                             562 wd_elen  equ    $0a          repeated entry length
0024                             563 *
0024                             564 * Window Attributes
0024                             565 *
0024                             566 wda_clfg equ    $00   byte   msb set if window not cleared when first drawn
0024                             567 wda_shdd equ    $01   byte   shadow depth
0024                             568 wda_borw equ    $02   word   border width
0024                             569 wda_borc equ    $04   word   border colour
0024                             570 wda_papr equ    $06   word   paper colour
0024                             571 *
0024                             572 * Menu Item Attributes
0024                             573 *
0024                             574 wda_curw equ    $00   word   current item border width
0024                             575 wda_curc equ    $02   word   current item border colour
0024                             576 wda_attr equ    $04          attribute records
0024                             577 wda_unav equ    $04          item unavailable
0024                             578 wda_aval equ    $0c          item available
0024                             579 wda_selc equ    $14          item selected
0024                             580 wda_elen equ    $1c          menu item attribute entry length
0024                             581 *
0024                             582 *   attribute record
0024                             583 *
0024                             584 wda_back equ    $00   word   item background colour
0024                             585 wda_ink  equ    $02   word   text object ink colour 
0024                             586 wda_blob equ    $04   word   pointer to blob for pattern
0024                             587 wda_patt equ    $06   word   pointer to pattern for blob
0024                             588 *
0024                             589 * Loose Menu Items List
0024                             590 *
0024                             591 wdl_xsiz equ    $00   word   hit area x size (width) + scaling
0024                             592 wdl_ysiz equ    $02   word   hit area y size (height) + scaling
0024                             593 wdl_xorg equ    $04   word   hit area x origin + scaling
0024                             594 wdl_yorg equ    $06   word   hit area y origin + scaling 
0024                             595 wdl_xjst equ    $08   byte   object x justification rule
0024                             596 wdl_yjst equ    $09   byte   object y justification rule
0024                             597 wdl_type equ    $0a   byte   object type (0=text, 2=sprite, 4=blob, 6=pattern)
0024                             598 wdl_skey equ    $0b   byte   selection keystroke
0024                             599 wdl_pobj equ    $0c   word   pointer to object
0024                             600 wdl_item equ    $0e   word   item number 
0024                             601 wdl_pact equ    $10   word   pointer to action routine
0024                             602 wdl_elen equ    $12          loose menu item list entry length
0024                             603 *
0024                             604 * Information Sub-Window
0024                             605 *
0024                             606 wdi_xsiz equ    $00   word   sub-window x size (width) in pixels + scaling
0024                             607 wdi_ysiz equ    $02   word   sub-window y size (height) in pixels + scaling
0024                             608 wdi_xorg equ    $04   word   sub-window x origin + scaling
0024                             609 wdi_yorg equ    $06   word   sub-window y origin + scaling
0024                             610 wdi_watt equ    $08          sub-window attributes
0024                             611 wdi_pobl equ    $10   word   pointer to information object list
0024                             612 wdi_elen equ    $12          information list entry length
0024                             613 *
0024                             614 * Information Object List
0024                             615 *
0024                             616 wdo_xsiz equ    $00   word   object x size (width) in pixels + scaling
0024                             617 wdo_ysiz equ    $02   word   object y size (height) in pixels + scaling
0024                             618 wdo_xorg equ    $04   word   object x origin + scaling
0024                             619 wdo_yorg equ    $06   word   object y origin + scaling 
0024                             620 wdo_type equ    $08   byte   object type (0=text, 2=sprite, 4=blob, 6=pattern)
0024                             621 wdo_spar equ    $09   byte   spare
0024                             622 wdo_ink  equ    $0a   word   text ink colour
0024                             623 wdo_csiz equ    $0c   word   text character size (two bytes)
0024                             624 wdo_comb equ    $0a   word   pattern or blob to combine
0024                             625 wdo_pobj equ    $0e   word   pointer to object
0024                             626 wdo_elen equ    $10          information object list entry length
0024                             627 *
0024                             628 * Application sub-window definition
0024                             629 *
0024                             630 wda_xsiz equ    $00   word   sub-window x size (width) in pixels + scaling
0024                             631 wda_ysiz equ    $02   word   sub-window y size (height) in pixels + scaling
0024                             632 wda_xorg equ    $04   word   sub-window x origin + scaling
0024                             633 wda_yorg equ    $06   word   sub-window y origin + scaling
0024                             634 wda_watt equ    $08          sub-window attributes
0024                             635 wda_pspr equ    $10   word   pointer to pointer sprite for this sub-window
0024                             636 wda_setr equ    $12   word   pointer to application sub-window setup routine
0024                             637 wda_draw equ    $14   word   pointer to application sub-window draw routine
0024                             638 wda_hit  equ    $16   word   pointer to application sub-window hit routine
0024                             639 wda_ctrl equ    $18   word   pointer to application sub-window control routine
0024                             640 wda_nxsc equ    $1a   word   maximum number of x control sections
0024                             641 wda_nysc equ    $1c   word   maximum number of y control sections
0024                             642 wda_skey equ    $1e   byte   application sub-window selection keystroke
0024                             643 wda_ext  equ    $1f   byte   zero
0024                             644 wda_blen equ    $20          application sub-window basic definition length
0024                             645 *
0024                             646 *   pannable and scrollable sub-windows only (wda_nxsc or wda_nysc <>0)
0024                             647 *
0024                             648 wda_part equ    $00   word   pointer to the part window control block (or 0)
0024                             649 wda_insz equ    $02   word   index hit size + scaling
0024                             650 wda_insp equ    $04   word   index spacing left or above sub-window + scaling
0024                             651 wda_icur equ    $06   long   index current item attribute (border width, colour)
0024                             652 wda_iiat equ    $0a          index item attribute record
0024                             653 wda_psac equ    $12   word   pan or scroll arrow colour
0024                             654 wda_psbc equ    $14   word   pan or scroll bar colour
0024                             655 wda_pssc equ    $16   word   pan or scroll bar section colour
0024                             656 wda_clen equ    $18          application sub-window control definition length
0024                             657 *
0024                             658 *   menu sub-windows only (processed by WM_SMENU called from application setup)
0024                             659 *
0024                             660 wda_mstt equ    $00   word   pointer to menu status block
0024                             661 wda_iatt equ    $02          item attributes
0024                             662 wda_ncol equ    $1e   word   number of actual columns
0024                             663 wda_nrow equ    $20   word   number of actual rows
0024                             664 wda_xoff equ    $22   word   x offset of start of menu (section)
0024                             665 wda_yoff equ    $24   word   y offset of start of menu (section)
0024                             666 wda_xspc equ    $26   word   pointer to x (column) spacing list
0024                             667 wda_yspc equ    $28   word   pointer to y (row) spacing list
0024                             668 wda_xind equ    $2a   word   pointer to x (column) index list
0024                             669 wda_yind equ    $2c   word   pointer to y (row) index list
0024                             670 wda_rowl equ    $2e   word   pointer to menu row list
0024                             671 wda_mlem equ    $30          sub-window menu definition length
0024                             672 *
0024                             673 *   menu object spacing list
0024                             674 *
0024                             675 wdm_size equ    $00   word   object hit size + scaling
0024                             676 wdm_spce equ    $02   word   object spacing + scaling
0024                             677 wdm_slen equ    $04          object spacing list element length
0024                             678 *
0024                             679 *   menu row list
0024                             680 wdm_rows equ    $00   word   pointer to object row list start
0024                             681 wdm_rowe equ    $02   word   pointer to object row list end
0024                             682 wdm_rlen equ    $04          menu row list element length
0024                             683 *
0024                             684 *   menu object / index list
0024                             685 wdm_xjst equ    $00   byte   object x justification rule
0024                             686 wdm_yjst equ    $01   byte   object y justification rule
0024                             687 wdm_type equ    $02   byte   object type (0=text, 2=sprite, 4=blob, 6=pattern)
0024                             688 wdm_skey equ    $03   byte   selection keystroke
0024                             689 wdm_pobj equ    $04   word   pointer to object
0024                             690 wdm_item equ    $06   word   item number (-1 for index)
0024                             691 wdm_pact equ    $08   word   pointer to action routine (zero for index)
0024                             692 wdm_olen equ    $0a          menu object / index list entry length
0024                             693 
0024                             694 id	equ 0			; Offset to channel id storage
0024                             695 wmvec	equ 4			; Offset to WMAN vector storage
0024                             696 slimit	equ 8			; Offset to storage for return from IOP_FLIM.
0024                             697 ;				  The storage is X-size, Y-size, X-org, Y-org - all words.
0024 4DF6 C800                   698 start	lea (a6,a4.l),a6	; Make A6 point to the job's dataspace
0028 6100 009C                   699 	bsr op_con		; Open a con channel
002C 2D48 0000                   700 	move.l a0,id(a6)	; And store the channel id
0030 7070                        701 	moveq #iop_pinf,d0	; Trap to get Pointer Information
0032 76FF                        702 	moveq #-1,d3		; Timeout
0034 4E43                        703 	trap #3 		; Do it
0036 4A80                        704 	tst.l d0		; Is ptr_gen present?
0038 6600 04E0                   705 	bne sui 		; No, bale out via SUI
003C 2D49 0004                   706 	move.l a1,wmvec(a6)	; Yes, store the WMAN vector
0040 6700 04D8                   707 	beq sui 		; Oops! WMAN wasn't actually found
0044                             708 
0044 2449                        709 flim	movea.l a1,a2		; The WMAN vector is required in A2
0046                             710 ;				  The channel id is already in A0
0046 43EE 0008                   711 	lea slimit(a6),a1	; Result buffer
004A 706C                        712 	moveq #iop_flim,d0	; Query maximum size of window
004C 7400                        713 	moveq #0,d2		; D2 is required to be zero
004E                             714 ;				  D3 is the timeout from the above trap #3
004E 4E43                        715 	trap #3 		; Do it (No errors)
0050 4A80                        716 	tst.l d0		; Did it work?
0052 6600 04C6                   717 	bne sui 		; No, exit via SUI
0056                             718 
0056 0491 000C 0008              719 	subi.l #$C0008,(a1)	; Subtract 12 from the width and 8 from the height
005C 47FA 0152                   720 	lea wd0,a3		; Get the address of window definition
0060 223C 0000 0122              721 	move.l #ww0_0,d1	; Get the size of the working definition
0066 6100 0454                   722 	bsr getsp		; Easy PEasy routine to ALCHP memory and set A0
006A 2848                        723 	movea.l a0,a4		; Which we save in A4
006C 43FA 0188                   724 	lea wst0,a1		; Status area starts here - thanks to SETW
0070 2049                        725 	movea.l a1,a0		; Copy to A0
0072 7240                        726 	moveq #wst0_e-wst0-1,d1 ; How many bytes to clear - 1
0074                             727 
0074 4218                        728 st_clr	clr.b (a0)+		; Clear one byte
0076 51C9 FFFC                   729 	dbf d1,st_clr		; Then the remainder
007A 206E 0000                   730 	movea.l id(a6),a0	; Get the channel id where we need it
007E                             731 ;				  A1 is the status area address from above
007E                             732 ;				  A3 is the window definition address from above
007E                             733 ;				  A4 is the working definition address from GETSP above
007E 222B 0030                   734 	move.l wd_xmin+wd_rbase(a3),d1 ; Get the minimum dimensions from definition
0082 0281 0FFF 0FFF              735 	andi.l #$FFF0FFF,d1	; Mask off any scaling factors - as previously described
0088 4EAA 0004                   736 	jsr wm_setup(a2)	; Set up the working definition - no errors
008C                             737 
008C 72FF                        738 	moveq #-1,d1		; We want to draw the window where the pointer is
008E 4EAA 000C                   739 	jsr wm_prpos(a2)	; So position it first as a primary window, then
0092 4EAA 001C                   740 	jsr wm_wdraw(a2)	; Draw the contents
0096 4EAA 0030                   741 wrpt	jsr wm_rptr(a2) 	; Enter the "read pointer" loop in WMAN
009A 6704                        742 	beq.s no_err		; Since D0 is zero D4 is non zero
009C 6000 047C                   743 	bra sui 		; An error occurred exit via SUI
00A0                             744 
00A0 2254                        745 no_err	movea.l (a4),a1 	; Status area address
00A2 0829 0011 0015              746 	btst #pt__can,wsp_weve(a1) ; Check for CANCEL event
00A8 6600 0470                   747 	bne sui 		; Exit
00AC                             748 
00AC 60E8                        749 	bra.s wrpt		; No more events, read pointer again
00AE                             750 
00AE                             751 ; Loose item action routine
00AE                             752 
00AE 08E9 0011 0015              753 afun0_0 bset  #pt__can,wsp_weve(a1) ; Set the CANCEL event bit
00B4 7811                        754 	moveq #pt__can,d4	  ; And load the CANCEL event number in D4
00B6 7000                        755 	moveq #0,d0		  ; No errors
00B8 4E75                        756 	rts			  ; Exit, and cause an exit from wm_rptr too
00BA                             757 
00BA                             758 ; Application sub-window hit routine
00BA                             759 
00BA 7800                        760 ahit0	moveq #0,d4
00BC 7000                        761 	moveq #0,d0
00BE 4E75                        762 	rts
00C0                             763 
00C0                             764 ; Various helper routines go here...
00C0                             765 
00C0 0003                        766 con	dc.w con_e-con-2	  ; Size of channel definition
00C2 636F 6E                     767 	dc.b 'con'
00C5                             768 con_e	equ *
00C5 C0                          769 
00C6 41FA FFF8                   770 op_con	lea  con,a0		  ; We want a console
00CA 72FF                        771 	moveq #-1,d1		  ; For this job
00CC 7600                        772 	moveq #0,d3		  ; Timeout
00CE 7001                        773 	moveq #io_open,d0
00D0 4E42                        774 	trap #2 		  ; Do it
00D2 4E75                        775 	rts
00D4                             776 
00D4                             777 ; Pull in our window definition file.
00D4                             778 
00D4                             779 	in  win1_source_qltoday_ApplTestWin_asm
00D4                             780 
00D4                             781 ; Undefined Labels
00D4                             782 ;	 ahit0
00D4                             783 ;	 afun0_0
00D4                             784 
00D4                             785 ; Labels for External Use
00D4                             786 ;	 wst0
00D4                             787 ;	 wd0
00D4                             788 ;	 ww0_0
00D4                             789 ;	 ww0_1
00D4                             790 
00D4 0000 0001 0002 0003 0004    791 SYS_SPR  dc.w	   0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37
0120                             792 
0120 0001                        793 txt0	 dc.w	   txt0_e-2-txt0
0122 58                          794 	 dc.b	   "X"
0123 00                          795 txt0_e	 ds.b	   0
0124                             796 	 ds.w	   0
0124                             797 
0124 0017                        798 txt1	 dc.w	   txt1_e-2-txt1
0126 4170 706C 6963 6174 696F    799 	 dc.b	   "Application Window Test"
013D 00                          800 txt1_e	 ds.b	   0
013E                             801 	 ds.w	   0
013E                             802 
013E                             803 app_list0
013E 0004                        804 	 dc.w	   appw0-*
0140 0000                        805 	 dc.w	   0
0142                             806 
0142                             807 appw0
0142 00C0                        808 	 dc.w	   192	     xsize
0144 0077                        809 	 dc.w	   119	     ysize
0146 0004                        810 	 dc.w	   4	     xorg
0148 0012                        811 	 dc.w	   18	     yorg
014A 0100                        812 	 dc.w	   256	     flag
014C 0001                        813 	 dc.w	   1	     borw
014E 0000                        814 	 dc.w	   0	     borc
0150 0007                        815 	 dc.w	   7	     papr
0152 0000                        816 	 dc.w	   0	     pspr *
0154 0000                        817 	 dc.w	   0	     setr *
0156 0000                        818 	 dc.w	   0	     draw *
0158 FF62                        819 	 dc.w	   ahit0-*   hit *
015A 0000                        820 	 dc.w	   0	     cntrl *
015C 0000                        821 	 dc.w	   0	     nxsc
015E 0000                        822 	 dc.w	   0	     nysc
0160 09                          823 	 dc.b	   9	     skey
0161 00                          824 	 dc.b	   0	     spr1
0162                             825 
0162                             826 pobl0
0162 008A                        827 	 dc.w	   138	     xsize
0164 000A                        828 	 dc.w	   10	     ysize
0166 0002                        829 	 dc.w	   2	     xorg
0168 0002                        830 	 dc.w	   2	     yorg
016A 00                          831 	 dc.b	   0	     type
016B 00                          832 	 dc.b	   0	     spar
016C 0000 0000                   833 	 dc.l	   0	     Ink, xcsize,ycsize
0170 FFB4                        834 	 dc.w	   txt1-*    pobj *
0172 FFFF                        835 	 dc.w	   -1
0174                             836 
0174                             837 infw0
0174 00C8                        838 	 dc.w	   200	     xsize
0176 0010                        839 	 dc.w	   16	     ysize
0178 0000                        840 	 dc.w	   0	     xorg
017A 0000                        841 	 dc.w	   0	     yorg
017C 0000                        842 	 dc.w	   0	     flag
017E 0000                        843 	 dc.w	   0	     borw
0180 020E                        844 	 dc.w	   526	     borc
0182 005C                        845 	 dc.w	   92	     papr
0184 FFDE                        846 	 dc.w	   pobl0-*   pobl *
0186 FFFF                        847 	 dc.w	   -1	     end
0188                             848 
0188                             849 
0188                             850 litm0
0188 000A 000A                   851 	 dc.w	   10,10     xsize, ysize
018C 00BA 0003                   852 	 dc.w	   186,3     xorg, yorg
0190 0000                        853 	 dc.b	   0,0	     xjst, yjst
0192 0003                        854 	 dc.b	   0,3	     type, skey
0194 FF8C                        855 	 dc.w	   txt0-*    pobj *
0196 0000                        856 	 dc.w	   0	     item
0198 FF16                        857 	 dc.w	   afun0_0-* pact *
019A FFFF                        858 	 dc.w	   -1	     end
019C                             859 
019C                             860 
019C                             861 litm1
019C 4014 000C                   862 	 dc.w	   16404,12  xsize, ysize
01A0 0000 0000                   863 	 dc.w	   0,0	     xorg, yorg
01A4 0000                        864 	 dc.b	   0,0	     xjst, yjst
01A6 0000                        865 	 dc.b	   0,0	     type, skey
01A8 0000                        866 	 dc.w	   0	     pobj *
01AA 0000                        867 	 dc.w	   0	     item
01AC 0000                        868 	 dc.w	   0	     pact *
01AE FFFF                        869 	 dc.w	   -1	     end
01B0                             870 
01B0                             871 
01B0                             872 wd0
01B0 00C8                        873 	 dc.w	   200	     xsize
01B2 008C                        874 	 dc.w	   140	     ysize
01B4 0000                        875 	 dc.w	   0	     xorg
01B6 0000                        876 	 dc.w	   0	     yorg
01B8 0102                        877 	 dc.w	   258	     flag
01BA 0001                        878 	 dc.w	   1	     borw
01BC 0000                        879 	 dc.w	   0	     borc
01BE 0007                        880 	 dc.w	   7	     papr
01C0 0000                        881 	 dc.w	   0	     sprt *
01C2 0001                        882 	 dc.w	   1	     curw
01C4 0000                        883 	 dc.w	   0	     curc
01C6 0007                        884 	 dc.w	   7	     uback
01C8 00FF                        885 	 dc.w	   255	     uink
01CA 0000                        886 	 dc.w	   0	     ublob *
01CC 0000                        887 	 dc.w	   0	     upatt *
01CE 0007                        888 	 dc.w	   7	     aback
01D0 0000                        889 	 dc.w	   0	     aink
01D2 0000                        890 	 dc.w	   0	     ablob *
01D4 0000                        891 	 dc.w	   0	     apatt *
01D6 0004                        892 	 dc.w	   4	     sback
01D8 0000                        893 	 dc.w	   0	     sink
01DA 0000                        894 	 dc.w	   0	     sblob *
01DC 0000                        895 	 dc.w	   0	     spatt *
01DE 0000                        896 	 dc.w	   0	     help
01E0 00C8                        897 	 dc.w	   200	     xsize
01E2 008C                        898 	 dc.w	   140	     ysize
01E4 FF90                        899 	 dc.w	   infw0-*   pinfo *
01E6 FFA2                        900 	 dc.w	   litm0-*   plitem *
01E8 FF56                        901 	 dc.w	   app_list0-*	       pappl *
01EA 4000                        902 	 dc.w	   16384     xsize
01EC 000C                        903 	 dc.w	   12	     ysize
01EE 0000                        904 	 dc.w	   0	     pinfo *
01F0 FFAC                        905 	 dc.w	   litm1-*   plitem *
01F2 0000                        906 	 dc.w	   0	     pappl *
01F4 FFFF                        907 	 dc.w	   -1
01F6                             908 
01F6                             909 ; Sizes
01F6                             910 ww0_0	 equ	   290
01F6                             911 ww0_1	 equ	   148
01F6                             912 
01F6                             913 ; Status Areas
01F6                             914 wst0
01F6 6100 0000 2848 43FA 0000    915 	 ds.b	   65
0237 00                          916 wst0_e	 ds.b	   0
0238                             917 	 ds.w	   0
0238                             918 
0238                             919 ; We need George's Easy PEasy code next.
0238                             920 
0238                             921 	in  win1_georgegwilt_peass_peas_sym_lst
0238                             922 GETSP	EQU   *+$00000284
0238                             923 MOVE	EQU   *+$000002B8
0238                             924 RECHP	EQU   *+$00000298
0238                             925 SET_AP	EQU   *+$000002EA
0238                             926 SLEEP	EQU   *+$00000000
0238                             927 SUI	EQU   *+$000002E2
0238 0000 0000 2848 43FA 0000    928 	lib win1_georgegwilt_peass_peas_bin
060E                             929 
060E                             930 ; And finally, George's sprites.
060E                             931 
060E                             932 	in  win1_georgegwilt_peass_csprc_sym_lst
060E                             933 WM_SPRITE_CF1       EQU   *+$00000098
060E                             934 WM_SPRITE_CF4       EQU   *+$00000134
060E                             935 WM_SPRITE_F5        EQU   *+$00000168
060E                             936 WM_SPRITE_F8        EQU   *+$00000204
060E                             937 WM_SPRITE_F10       EQU   *+$0000026C
060E                             938 WM_SPRITE_INSG      EQU   *+$00000320
060E                             939 WM_SPRITE_WAKE      EQU   *+$000004A4
060E                             940 WM_SPRITE_F2        EQU   *+$00000514
060E                             941 WM_SPRITE_MOVE      EQU   *+$000005D8
060E                             942 CPT_DOWN_SPR        EQU   *+$0000264C
060E                             943 CPT_CURT_SPR        EQU   *+$000029AC
060E                             944 WM_SPRITE_ARROW     EQU   *+$00000000
060E                             945 WM_SPRITE_CF2       EQU   *+$000000CC
060E                             946 WM_SPRITE_F6        EQU   *+$0000019C
060E                             947 WM_SPRITE_F9        EQU   *+$00000238
060E                             948 WM_SPRITE_SLEEP     EQU   *+$00000470
060E                             949 WM_SPRITE_F3        EQU   *+$00000548
060E                             950 WM_SPRITE_SIZE      EQU   *+$00000610
060E                             951 CPT_HAND_SPR        EQU   *+$00000644
060E                             952 CPT_DIA_SPR         EQU   *+$00000B04
060E                             953 CPT_CIRC_SPR        EQU   *+$00000E3C
060E                             954 CPT_NUL_SPR         EQU   *+$00001BDC
060E                             955 CPT_RIGHT_SPR       EQU   *+$00001F94
060E                             956 CPT_UP_SPR          EQU   *+$000022EC
060E                             957 WM_SPRITE_CF3       EQU   *+$00000100
060E                             958 WM_SPRITE_F7        EQU   *+$000001D0
060E                             959 WM_SPRITE_HAND      EQU   *+$000002A0
060E                             960 WM_SPRITE_INSL      EQU   *+$000003C8
060E                             961 WM_SPRITE_F1        EQU   *+$000004E0
060E                             962 WM_SPRITE_F4        EQU   *+$0000057C
060E                             963 CPT_LEFT_SPR        EQU   *+$00001C3C
060E 0000 0000 2848 43FA 0000    964 	lib win1_georgegwilt_peass_csprc_bin
308A                             965 